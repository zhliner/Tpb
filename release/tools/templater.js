import{OBTA as t,XLoader as e}from"../config.js";import{TplLoader as s}from"./tloader.js";import{Render as r}from"./render.js";const l=window.$,i=`[${t.on}], [${t.src}]`,o=`${t.on} ${t.by} ${t.to} ${t.src}`;class n{constructor(t,r,l){this._obter=t,this._loader=new s(r,e),this._tpls=l||new Map,this._tplx=new Map,this._pool=new Map}get(t){let e=this._tpls.get(t);return e?Promise.resolve(e):this._tplx.get(t)||this._load(t)}clone(t,e){return this.get(t).then((t=>this._clone(t,e)))}node(t,e,s){let r=this._tpls.get(t);return r?e?this._clone(r,s):r:null}del(t){let e=this._tpls.get(t);return e&&this._tpls.delete(t),e||null}clear(){this._tpls.clear()}build(t){return this._build(t)}tpls(t){for(const e of l.find("[tpl-name]",t,!0))this.add(e),l.trigger(e,"tpled",null,!1,!1);let e=this._subs(t);return e?Promise.all(e):Promise.resolve()}add(t){let e=l.xattr(t,"tpl-name"),s=this._subs(t);if(!s)return this._add(e,t);let r=Promise.all(s).then((()=>this._add(e,t))).then((()=>this._tplx.delete(e)&&t));this._tplx.set(e,r)}config(t){return this._loader.config(t||{})}_build(t,e){if(this._pool.has(t))return this._pool.get(t);let s=this._buildx(t).then((()=>this.tpls(t))).then((()=>this._pool.delete(t))).then((()=>!e||!this._loader.clean(e)));return this._pool.set(t,s),r.parse(t)&&s}_add(t,e){if(this._tpls.has(t))throw new Error(`[${t}] node was exist.`);this._tpls.set(t,e)}_load(t){return this._loader.load(t).then((([t,e])=>this._build(t,e))).then((()=>this._tpls.get(t)||this._tplx.get(t)))}_clone(t,e){return r.clone(t,l.clone(t,e,!0,e))}_subs(t){let e=l.find("[tpl-node], [tpl-source]",t,!0);return 0===e.length?null:l.map(e,(t=>this._imports(t)))}_pick(t){return this.get(t).then((e=>(this._tpls.delete(t)||this._tplx.delete(t))&&e))}_imports(t){let[e,s]=this._reference(t),r=!1;return"!"===s[0]&&(r=!0,s=s.substring(1)),Promise.all(s.split(",").map((t=>this[e](t.trim(),r)))).then((e=>l.replace(t,e)))}_reference(t){let e=t.hasAttribute("tpl-node")?"tpl-node":"tpl-source",s=l.xattr(t,e).trim(),r="get";return"~"===s[0]&&(r="_pick",s=s.substring(1)),["tpl-node"==e?"clone":r,s]}_obtattr(e){return{on:l.attr(e,t.on)||"",by:l.attr(e,t.by)||"",to:l.attr(e,t.to)||""}}_obtjson(t){return t.split(",").map((t=>this._loader.json(t)))}_obtall(e){let s=[];return e.hasAttribute(t.on)&&s.push(this._obtattr(e)),e.hasAttribute(t.src)&&s.push(...this._obtjson(l.attr(e,t.src))),l.removeAttr(e,o),Promise.all(s)}_buildx(t){let e=[];for(const s of l.find(i,t,!0))e.push(this._obtall(s).then((t=>t.forEach((t=>this._obter.build(s,t))))));return Promise.all(e)}}export{n as Templater};
