import{OBTA as t}from"../config.js";import{Render as e}from"./render.js";const s=window.$,r=`[${t.on}], [${t.src}]`;class l{constructor(t,e,s){this._obter=t,this._loader=e,this._tpls=s||new Map,this._tplx=new Map,this._pool=new Map}get(t){let e=this._tpls.get(t);return e?Promise.resolve(e):this._tplx.get(t)||this._load(t)}clone(t,e){return this.get(t).then((t=>this._clone(t,e)))}node(t,e,s){let r=this._tpls.get(t);return r?e?this._clone(r,s):r:null}del(t){let e=this._tpls.get(t);return e&&this._tpls.delete(t),e||null}clear(){this._tpls.clear()}build(t,e){return this._build(t,e).then((()=>this))}tpls(t){for(const e of s.find("[tpl-name]",t,!0))this.add(e),s.trigger(e,"tpled",null,!1,!1);let e=this._subs(t);return e?Promise.all(e):Promise.resolve()}add(t){let e=s.xattr(t,"tpl-name"),r=this._subs(t);if(!r)return this._add(e,t);let l=Promise.all(r).then((()=>this._add(e,t))).then((()=>this._tplx.delete(e)&&t));this._tplx.set(e,l)}config(t){return this._loader.config(t||{}).then((()=>this))}_build(t,s=!1){if(this._pool.has(t))return this._pool.get(t);let r=this._buildx(t).then((()=>this.tpls(t))).then((()=>this._pool.delete(t))).then((()=>s&&!this._loader.clean(s)));return this._pool.set(t,r),e.parse(t)&&r}_add(t,e){if(this._tpls.has(t))throw new Error(`[${t}] node was exist.`);this._tpls.set(t,e)}_load(t){return this._loader.load(t).then((([t,e])=>this._build(t,e))).then((()=>this._tpls.get(t)||this._tplx.get(t)))}_clone(t,r){return e.clone(t,s.clone(t,r,!0,r))}_subs(t){let e=s.find("[tpl-node], [tpl-source]",t,!0);return 0===e.length?null:s.map(e,(t=>this._imports(t)))}_pick(t){return this.get(t).then((e=>(this._tpls.delete(t)||this._tplx.delete(t))&&e))}_imports(t){let[e,r]=this._reference(t),l=!1;return"!"===r[0]&&(l=!0,r=r.substring(1)),Promise.all(r.split(",").map((t=>this[e](t.trim(),l)))).then((e=>s.replace(t,e)))}_reference(t){let e=t.hasAttribute("tpl-node")?"tpl-node":"tpl-source",r=s.xattr(t,e).trim(),l="get";return"~"===r[0]&&(l="_pick",r=r.substring(1)),["tpl-node"==e?"clone":l,r]}_buildx(t){let e=[];for(const l of s.find(r,t,!0))e.push(n(l,this._loader).then((t=>t.forEach((t=>this._obter.build(l,t))))));return Promise.all(e)}}const i=`${t.on} ${t.by} ${t.to} ${t.src}`;function n(e,r){let l=[];return e.hasAttribute(t.on)&&l.push(function(e){return{on:s.attr(e,t.on)||"",by:s.attr(e,t.by)||"",to:s.attr(e,t.to)||""}}(e)),e.hasAttribute(t.src)&&l.push(...function(t,e){return t.split(",").map((t=>e.json(t)))}(s.attr(e,t.src),r)),s.removeAttr(e,i),Promise.all(l)}export{l as Templater,n as obtAttr};
